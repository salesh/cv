{"version":3,"sources":["img/profile.jpeg","components/Social.js","contents/Home.js","components/Navitem.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Social","className","href","target","rel","class","Component","Home","src","profilePic","alt","text","speed","eraseDelay","Navitem","id","this","props","item","to","tolink","onClick","activeBarItem","bind","Navbar","activeItem","x","state","NavItemActive","length","document","getElementById","classList","remove","setState","add","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,sC,6PCY5BC,E,iLARP,OACI,yBAAKC,UAAU,UACX,uBAAGC,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAAsB,uBAAGC,MAAM,wB,GAJlFC,aCmBNC,E,iLAbP,OACI,yBAAKN,UAAU,eACX,yBAAKO,IAAKC,IAAYC,IAAI,KAAKT,UAAU,eACzC,kBAAC,IAAD,CAAmBA,UAAU,gBACzBU,KAAM,CAAC,sCAA6B,6BACpCC,MAAO,IAAKC,WAAY,MAE5B,kBAAC,EAAD,W,GAVGP,aCaJQ,E,iLAVP,OACI,wBAAIC,GAAIC,KAAKC,MAAMC,MACf,kBAAC,IAAD,CAAMC,GAAIH,KAAKC,MAAMG,OAAQC,QAASL,KAAKC,MAAMK,cAAcC,KAAKP,KAAMA,KAAKC,MAAMC,OAChFF,KAAKC,MAAMC,W,GARVZ,aCoCPkB,E,YA/BX,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KAMVQ,WAAa,SAACC,GACN,EAAKC,MAAMC,cAAcC,OAAS,GAClCC,SAASC,eAAe,EAAKJ,MAAMC,eAAeI,UAAUC,OAAO,UAEvE,EAAKC,SAAS,CAAC,cAAiBR,IAAI,WAChCI,SAASC,eAAe,EAAKJ,MAAMC,eAAeI,UAAUG,IAAI,cAVpE,EAAKR,MAAQ,CACT,cAAiB,IAHN,E,sEAiBf,OACI,6BACI,4BACI,kBAAC,EAAD,CAAST,KAAK,OAAOE,OAAO,IAAIE,cAAeN,KAAKS,aACpD,kBAAC,EAAD,CAASP,KAAK,QAAQE,OAAO,SAASE,cAAeN,KAAKS,aAC1D,kBAAC,EAAD,CAASP,KAAK,YAAYE,OAAO,aAAaE,cAAeN,KAAKS,aAClE,kBAAC,EAAD,CAASP,KAAK,SAASE,OAAO,UAAUE,cAAeN,KAAKS,aAC5D,kBAAC,EAAD,CAASP,KAAK,UAAUE,OAAO,YAAYE,cAAeN,KAAKS,mB,GA7B9DnB,aCsBN8B,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAM,GACf,kBAAC,EAAD,UCLQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASC,eAAe,SD6H3C,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bd7d80d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.72504425.jpeg\";","import React, { Component } from 'react';\n\nclass Social extends Component {\n    render() {\n        return (\n            <div className=\"social\">\n                <a href=\"https://github.com/salesh\" target=\"_blank\" rel=\"noopener noreferrer\"><i class=\"fab fa-github\"></i></a>\n            </div>\n        )\n    }\n}\n\nexport default Social;","import React, { Component } from 'react';\nimport profilePic from '../img/profile.jpeg';\nimport ReactTypingEffect from 'react-typing-effect';\nimport Social from '../components/Social';\n\nclass Home extends Component {\n\n    render() {\n        return (\n            <div className=\"condiv home\">\n                <img src={profilePic} alt=\"me\" className=\"profilepic\"></img>\n                <ReactTypingEffect className=\"typingeffect \"\n                    text={['My name is Saša Cvetković', 'I am Full Stack Developer']}\n                    speed={100} eraseDelay={1000}\n                />\n                <Social/>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Navitem extends Component {\n    /*\n        Link is component from react-router-dom that get \"to\" where should go Link like href\n    */\n    render() {\n        return (\n            <li id={this.props.item}>\n                <Link to={this.props.tolink} onClick={this.props.activeBarItem.bind(this, this.props.item)}>\n                    {this.props.item}\n                </Link>\n            </li>\n        )\n    }\n}\n\nexport default Navitem;","import React, { Component } from 'react';\nimport Navitem from './Navitem';\n\nclass Navbar extends Component {\n    /*\n        activeItem get id from Navitem, we bind prop activeBarItem to this function so we can call it from Navitem\n    */\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'NavItemActive': ''\n        }\n    }\n\n    activeItem = (x) => {\n        if (this.state.NavItemActive.length > 0) {\n            document.getElementById(this.state.NavItemActive).classList.remove('active');\n        }\n        this.setState({'NavItemActive': x}, () => {\n            document.getElementById(this.state.NavItemActive).classList.add('active');\n        });\n    }\n    \n    render() {\n        return (\n            <nav>\n                <ul>\n                    <Navitem item=\"Home\" tolink=\"/\" activeBarItem={this.activeItem}></Navitem>\n                    <Navitem item=\"About\" tolink=\"/about\" activeBarItem={this.activeItem}></Navitem>\n                    <Navitem item=\"Education\" tolink=\"/education\" activeBarItem={this.activeItem}></Navitem>\n                    <Navitem item=\"Skills\" tolink=\"/skills\" activeBarItem={this.activeItem}></Navitem>\n                    <Navitem item=\"Contact\" tolink=\"/contract\" activeBarItem={this.activeItem}></Navitem>\n                </ul>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './contents/Home';\n\nimport Navbar from './components/Navbar';\n\n/*\n  BrowserRouter parent component that holds all routes <Router>\n  className attribute access the CSS class \n*/\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar/>\n        <Route exact path={\"/cv/\" | \"/\"}>\n            <Home/> \n        </Route>\n      </div>\n    </Router>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}